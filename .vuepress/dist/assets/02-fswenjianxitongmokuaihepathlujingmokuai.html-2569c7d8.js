import{_ as n,o as s,c as a,a as t}from"./app-fe457d72.js";const e={},p=t(`<h2 id="fs-文件系统模块" tabindex="-1"><a class="header-anchor" href="#fs-文件系统模块" aria-hidden="true">#</a> fs 文件系统模块</h2><p>fs 模块是 Node.js 官方提供的、用来操作文件的模块。提供了一系列的方法和属性，用来满足对文件的操作需求</p><p>如果要在 JavaScript 代码中，使用 fs 模块来操作文件，则需要使用如下的方式先导入它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;fs&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="fs-readfile-path-option-callback" tabindex="-1"><a class="header-anchor" href="#fs-readfile-path-option-callback" aria-hidden="true">#</a> <code>fs.readFile(path[, option], callback)</code></h3><p><code>fs.readFile(path[, option], callback)</code>读取指定文件中的内容</p><p><code>path</code> 必选参数，字符串，文件路径</p><p><code>option</code> 可选参数，设置字符集</p><p><code>callback</code> 必选参数，文件读取完成后的回调函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. 导入 fs 模块，来操作文件</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 调用 fs.readFile() 方法读取文件</span>
<span class="token comment">//    参数1：读取文件的存放路径</span>
<span class="token comment">//    参数2：读取文件时候采用的编码格式，一般默认指定 utf8</span>
<span class="token comment">//    参数3：回调函数，拿到读取失败和成功的结果  err  dataStr</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
  <span class="token comment">// 2.1 打印失败的结果</span>
  <span class="token comment">// 如果读取成功，则 err 的值为 null</span>
  <span class="token comment">// 如果读取失败，则 err 的值为 错误对象，dataStr 的值为 undefined</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;-------&#39;</span><span class="token punctuation">)</span>
  
  <span class="token comment">// 2.2 打印成功的结果</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//一般逻辑可以这么写：</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/11.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件失败！&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件成功！&#39;</span> <span class="token operator">+</span> dataStr<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fs-writefile-path-data-option-callback" tabindex="-1"><a class="header-anchor" href="#fs-writefile-path-data-option-callback" aria-hidden="true">#</a> <code>fs.writeFile(path, data[, option], callback)</code></h3><p><code>fs.writeFile(path, data[, option], callback)</code> 向指定的文件中写入内容</p><p><code>path</code> 必选参数，字符串，文件路径</p><p><code>data</code> 必选参数，写入的内容</p><p><code>option</code> 可选参数，设置字符集，默认值是 utf8</p><p><code>callback</code> 必选参数，文件写入完成后的回调函数</p><p><strong>注意：写入会覆盖原内容</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 2. 调用 fs.writeFile() 方法，写入文件的内容</span>
<span class="token comment">//    参数1：表示文件的存放路径</span>
<span class="token comment">//    参数2：表示要写入的内容</span>
<span class="token comment">//    参数3：回调函数</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">&#39;./files/3.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ok123&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 2.1 如果文件写入成功，则 err 的值等于 null</span>
  <span class="token comment">// 2.2 如果文件写入失败，则 err 的值等于一个 错误对象</span>
  <span class="token comment">// console.log(err)</span>
<span class="token comment">//判断是否写入成功</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入失败！&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件写入成功！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>省略第三个参数则默认为UTF8格式</strong></p><p><strong>注意点：</strong></p><ul><li><code>fs.writeFile()</code>方法只能用来创建文件，不能用来创建路径</li><li>重复调用<code>fs.writeFile(</code>写入同一个文件，新写入的内容会覆盖之前的旧内容</li></ul><h3 id="前言-路径动拼接的问题" tabindex="-1"><a class="header-anchor" href="#前言-路径动拼接的问题" aria-hidden="true">#</a> 前言：路径动拼接的问题</h3><p>使用fs模块操作文件时，如果提供的操作路径是以<code>./</code>或<code>…/</code>开头的相对路径时，很容易出现路径动态拼接错误的问题。</p><p><strong>原因</strong>：代码在运行的时候，会以执行node命令时所处的目录，动态拼接出被操作文件的完整路径。</p><p><strong>解决方案</strong>:在使用fs模块操作文件时，直接提供完整的路径，不要提供<code>.</code>或<code>…/</code>开头的相对路径，从而防止路径动态拼接的问题。**注意js中写完整路径要用//，不然会被当成转义字符处理。**但是这种方法移植性差。fs中有解决办法。</p><p><code>__dirname</code> 表示当前文件所处的目录**（即以js文件所处地方为基准），不会根据打开node目录变化而变化（即为打开node的地方为基准）**。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">&#39;/files/1.txt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件失败！&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;读取文件成功！&#39;</span> <span class="token operator">+</span> dataStr<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="path-路径模块" tabindex="-1"><a class="header-anchor" href="#path-路径模块" aria-hidden="true">#</a> path 路径模块</h2><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。提供一系列的方法和属性，用来满足对路径的处理需求</p><p>如果要在 JavaScript 代码中，使用 path 模块来处理路径，则需要使用如下的方式先导入它</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path-join-paths" tabindex="-1"><a class="header-anchor" href="#path-join-paths" aria-hidden="true">#</a> <code>path.join(...paths)</code></h3><p><code>path.join(...paths)</code> 可以把多个路径片段拼接为完整的路径字符串</p><p>注意：凡是涉及到路径拼接的操作，都要使用 path.join() 方法进行处理。不直接使用 <code>+</code> 进行字符串的拼接</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 注意：  ../ 会抵消前面的路径</span>
<span class="token keyword">const</span> pathStr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;/a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b/c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;../../&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;./d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pathStr<span class="token punctuation">)</span>  <span class="token comment">// \\a\\b\\d\\e</span>

<span class="token comment">// 取代fs.readFile(__dirname + &#39;/files/1.txt&#39;, ...)</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">&#39;./files/1.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> dataStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path-basename-path-ext" tabindex="-1"><a class="header-anchor" href="#path-basename-path-ext" aria-hidden="true">#</a> <code>path.basename(path[, ext])</code></h3><p><code>path.basename(path[, ext])</code> 可以获取路径中的最后一部分，经常通过这个方法获取路径中的文件名</p><ul><li><strong>path</strong> 必选参数，表示一个路径的字符串</li><li><strong>ext</strong> 可选参数，表示文件扩展名</li><li>返回 路径的最后一部分</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 定义文件的存放路径</span>
<span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">&#39;/a/b/c/index.html&#39;</span>

<span class="token keyword">const</span> fullName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fullName<span class="token punctuation">)</span> <span class="token comment">// index.html</span>

<span class="token keyword">const</span> nameWithoutExt <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fpath<span class="token punctuation">,</span> <span class="token string">&#39;.html&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameWithoutExt<span class="token punctuation">)</span> <span class="token comment">// index</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="path-extname-path" tabindex="-1"><a class="header-anchor" href="#path-extname-path" aria-hidden="true">#</a> <code>path.extname(path)</code></h3><p><code>path.extname(path)</code> 可以获取路径中的扩展名部分</p><ul><li>path 必选参数，表示一个路径的字符串</li><li>返回 返回得到的扩展名字符串</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 这是文件的存放路径</span>
<span class="token keyword">const</span> fpath <span class="token operator">=</span> <span class="token string">&#39;/a/b/c/index.html&#39;</span>

<span class="token keyword">const</span> fext <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>fpath<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fext<span class="token punctuation">)</span><span class="token comment">//输出.html</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,43),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","02-fswenjianxitongmokuaihepathlujingmokuai.html.vue"]]);export{r as default};
