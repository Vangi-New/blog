import{_ as e,o as a,c as n,a as d}from"./app-8e182d18.js";const s={},t=d(`<h2 id="默认网络" tabindex="-1"><a class="header-anchor" href="#默认网络" aria-hidden="true">#</a> 默认网络</h2><p>docker会自动创建三个网络，<code>bridge</code>,<code>host</code>,<code>none</code></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1660642734402-1c0fa111-aa20-42c5-930f-3164f119ca02.png" alt="img"></p><ul><li>bridge桥接网络</li></ul><p>如果不指定，新创建的容器默认将连接到bridge网络。</p><p>默认情况下，使用bridge网络，宿主机可以ping通容器ip，容器中也能ping通宿主机。</p><p>容器之间只能通过 IP 地址相互访问，由于容器的ip会随着启动顺序发生变化，因此不推荐使用ip访问。</p><ul><li>host</li></ul><p>慎用，可能会有安全问题。</p><p>容器与宿主机共享网络，不需要映射端口即可通过宿主机IP访问。（-p选项会被忽略）</p><p>主机模式网络可用于优化性能，在容器需要处理大量端口的情况下，它不需要网络地址转换 （NAT），并且不会为每个端口创建“用户空间代理”。</p><ul><li>none</li></ul><p>禁用容器中所用网络，在启动容器时使用。</p><h2 id="用户自定义网络" tabindex="-1"><a class="header-anchor" href="#用户自定义网络" aria-hidden="true">#</a> 用户自定义网络</h2><p>创建用户自定义网络</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker network create my-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将已有容器连接到此网络</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker network connect my-net db-mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建容器时指定网络。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it --rm --network my-net mysql:5.7 mysql -h**db-mysql** -uroot -p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在用户自定义网络上，容器之间可以通过容器名进行访问。</p><p>用户自定义网络使用 Docker 的嵌入式 DNS 服务器将容器名解析成 IP。</p><h2 id="主机名解析" tabindex="-1"><a class="header-anchor" href="#主机名解析" aria-hidden="true">#</a> 主机名解析</h2><h4 id="hostname" tabindex="-1"><a class="header-anchor" href="#hostname" aria-hidden="true">#</a> hostname</h4><p>容器的hostname默认为容器的 ID。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it -d --hostname my-alpine --name my-alpine  alpine:3.15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect <span class="token punctuation">\\</span>
	<span class="token parameter variable">--format</span><span class="token operator">=</span><span class="token string">&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39;</span> my-alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1660908781495-38fcf8f6-b15d-44a7-853d-2dca280be25a.png" alt="img"></p><h4 id="etc-hosts" tabindex="-1"><a class="header-anchor" href="#etc-hosts" aria-hidden="true">#</a> /etc/hosts</h4><p>在容器内手动修改 <code>/etc/hosts</code> 文件，容器重启后会恢复默认配置。</p><p>要使/etc/hosts修改生效，使用 <code>--add-host</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --add-host=my-alpine:172.17.0.3 -it --rm alpine:3.15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,32),i=[t];function r(c,l){return a(),n("div",null,i)}const p=e(s,[["render",r],["__file","04.html.vue"]]);export{p as default};
