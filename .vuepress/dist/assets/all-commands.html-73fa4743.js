import{_ as d,o as e,c as r,b as t,a as o}from"./app-43f13590.js";const c={},i=t("div",{class:"custom-container tip"},[t("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[t("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[t("circle",{cx:"12",cy:"12",r:"9"}),t("path",{d:"M12 8h.01"}),t("path",{d:"M11 12h1v4h1"})])]),t("p",{class:"custom-container-title"},"Tips"),t("p",null,"git命令大全（整理成表格，方便查阅）")],-1),a=o('<h2 id="创建仓库命令" tabindex="-1"><a class="header-anchor" href="#创建仓库命令" aria-hidden="true">#</a> 创建仓库命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git init</code></td><td>初始化仓库，在当前目录新建一个Git代码库，基本上是创建一个具有objects，refs/head，refs/tags和模板文件的.git目录。</td></tr><tr><td><code>git clone[url]</code></td><td>拷贝一份远程仓库，也就是下载一个项目和它的整个代码历史。</td></tr></tbody></table><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git config --list</code></td><td>显示当前的Git配置</td></tr><tr><td><code>git config -e [--global]</code></td><td>编辑Git配置文件。</td></tr><tr><td><code>git config [--global] user.name &quot;[name]&quot;</code> <br> <code>git config [--global] user.email &quot;[email address]&quot;</code></td><td>设置提交代码时的用户信息</td></tr></tbody></table><h2 id="增加-删除文件" tabindex="-1"><a class="header-anchor" href="#增加-删除文件" aria-hidden="true">#</a> 增加 / 删除文件</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git add [file1] [file2] ...</code></td><td>添加指定文件到暂存区</td></tr><tr><td><code>git add [dir]</code></td><td>添加指定目录到暂存区，包括子目录</td></tr><tr><td><code>git add .</code></td><td>添加当前目录的所有文件到暂存区</td></tr><tr><td><code>git add -p</code></td><td>添加每个变化前，都会要求确认 <br> 对于同一个文件的多处变化，可以实现分次提交</td></tr><tr><td><code>git rm [file1] [file2] ...</code></td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td><code>git rm --cached [file]</code></td><td>停止追踪指定文件，但该文件会保留在工作区</td></tr><tr><td><code>git mv [file-original] [file-renamed]</code></td><td>改名文件，并且将这个改名放入暂存区</td></tr></tbody></table><h2 id="代码提交" tabindex="-1"><a class="header-anchor" href="#代码提交" aria-hidden="true">#</a> 代码提交</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git commit -m [message]</code></td><td>提交暂存区到仓库区</td></tr><tr><td><code>git commit [file1] [file2] ... -m [message]</code></td><td>提交暂存区的指定文件到仓库区</td></tr><tr><td><code>git commit -a </code></td><td>提交工作区自上次commit之后的变化，直接到仓库区</td></tr><tr><td><code>git commit -v</code></td><td>提交时显示所有diff信息</td></tr><tr><td><code>git commit --amend -m [message]</code></td><td>使用一次新的commit，替代上一次提交 <br> 如果代码没有任何新变化，则用来改写上一次commit的提交信息</td></tr><tr><td><code>git commit --amend [file1] [file2] ...</code></td><td>重做上一次commit，并包括指定文件的新变化</td></tr></tbody></table><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git branch</code></td><td>列出所有本地分支</td></tr><tr><td><code>git branch -r</code></td><td>列出所有远程分支</td></tr><tr><td><code>git branch -a</code></td><td>列出所有本地分支和远程分支</td></tr><tr><td><code>git branch [branch-name]</code></td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td><code>git checkout -b [branch]</code></td><td>新建一个分支，并切换到该分支</td></tr><tr><td><code>git branch [branch] [commit]</code></td><td>新建一个分支，指向指定commit</td></tr><tr><td><code>git branch --track [branch] [remote-branch]</code></td><td>新建一个分支，与指定的远程分支建立追踪关系</td></tr><tr><td><code>git checkout [branch-name]</code></td><td>切换到指定分支，并更新工作区</td></tr><tr><td><code>git checkout -</code></td><td>切换到上一个分支</td></tr><tr><td><code>git merge [branch]</code></td><td>合并指定分支到当前分支</td></tr><tr><td><code>git cherry-pick [commit]</code></td><td>选择一个commit，合并进当前分支</td></tr><tr><td><code>git branch -d [branch-name]</code></td><td>删除分支</td></tr><tr><td><code>git push origin --delete [branch-name]</code> <br> 或 <br> <code>git branch -dr [remote/branch]</code></td><td>删除远程分支</td></tr><tr><td>``</td><td>----</td></tr></tbody></table><h2 id="标签" tabindex="-1"><a class="header-anchor" href="#标签" aria-hidden="true">#</a> 标签</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git tag</code></td><td>列出所有tag</td></tr><tr><td><code>git tag [tag]</code></td><td>新建一个tag在当前commit</td></tr><tr><td><code>git tag [tag] [commit]</code></td><td>新建一个tag在指定commit</td></tr><tr><td><code>git tag -d [tag]</code></td><td>删除本地tag</td></tr><tr><td><code>git push origin :refs/tags/[tagName]</code></td><td>删除远程tag</td></tr><tr><td><code>git show [tag]</code></td><td>查看tag信息</td></tr><tr><td><code>git push [remote] [tag]</code></td><td>提交指定tag</td></tr><tr><td><code>git push [remote] --tags</code></td><td>提交所有tag</td></tr><tr><td><code>git checkout -b [branch] [tag]</code></td><td>新建一个分支，指向某个tag</td></tr><tr><td>``</td><td>----</td></tr></tbody></table><h2 id="查看信息和历史" tabindex="-1"><a class="header-anchor" href="#查看信息和历史" aria-hidden="true">#</a> 查看信息和历史</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git status</code></td><td>显示有变更的文件</td></tr><tr><td><code>git log</code></td><td>显示当前分支的版本历史</td></tr><tr><td><code>git log --stat</code></td><td>显示commit历史，以及每次commit发生变更的文件</td></tr><tr><td><code>git log -S [keyword]</code></td><td>搜索提交历史，根据关键词</td></tr><tr><td><code>git log [tag] HEAD --pretty=format:%s </code></td><td>显示某个commit之后的所有变动，每个commit占据一行</td></tr><tr><td><code>git log [tag] HEAD --grep feature</code></td><td>显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</td></tr><tr><td><code>git log --follow [file]</code> <br> 或 <br> <code>git whatchanged [file]</code></td><td>显示某个文件的版本历史，包括文件改名</td></tr><tr><td><code>git log -p [file]</code></td><td>显示指定文件相关的每一次diff</td></tr><tr><td><code>git log -5 --pretty --oneline</code></td><td>显示过去5次提交</td></tr><tr><td><code>git shortlog -sn</code></td><td>显示所有提交过的用户，按提交次数排序</td></tr><tr><td><code>git blame [file]</code></td><td>显示指定文件是什么人在什么时间修改过</td></tr><tr><td><code>git diff</code></td><td>显示暂存区和工作区的差异</td></tr><tr><td><code>git diff --cached [file]</code></td><td>显示暂存区和上一个commit的差异</td></tr><tr><td><code>git diff HEAD</code></td><td>显示工作区与当前分支最新commit之间的差异</td></tr><tr><td><code>git diff [first-branch]...[second-branch]</code></td><td>显示两次提交之间的差异</td></tr><tr><td><code>git diff --shortstat &quot;@{0 day ago}&quot;</code></td><td>显示今天你写了多少行代码</td></tr><tr><td><code>git show [commit]</code></td><td>显示某次提交的元数据和内容变化</td></tr><tr><td><code>git show --name-only [commit]</code></td><td>显示某次提交发生变化的文件</td></tr><tr><td><code>git show [commit]:[filename]</code></td><td>显示某次提交时，某个文件的内容</td></tr><tr><td><code>git reflog</code></td><td>显示当前分支的最近几次提交</td></tr><tr><td>``</td><td>----</td></tr></tbody></table><h2 id="远程同步" tabindex="-1"><a class="header-anchor" href="#远程同步" aria-hidden="true">#</a> 远程同步</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git fetch [remote]</code></td><td>下载远程仓库的所有变动（远程新增或删除分支都能显示）</td></tr><tr><td><code>git remote -v</code></td><td>显示所有远程仓库</td></tr><tr><td><code>git config [--global] user.name &quot;[name]&quot;</code> <br> <code>git config [--global] user.email &quot;[email address]&quot; </code></td><td>设置提交代码时的用户信息</td></tr><tr><td><code>git remote show [remote]</code></td><td>显示某个远程仓库的信息</td></tr><tr><td><code>git remote add [shortname] [url]</code></td><td>增加一个新的远程仓库，并命名</td></tr><tr><td><code>git pull [remote] [branch]</code></td><td>取回远程仓库的变化，并与本地分支合并</td></tr><tr><td><code>git push [remote] [branch]</code></td><td>上传本地指定分支到远程仓库</td></tr><tr><td><code>git push [remote] --force</code></td><td>强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td><code>git push [remote] --all</code></td><td>推送所有分支到远程仓库</td></tr><tr><td>``</td><td>----</td></tr></tbody></table><h2 id="撤销" tabindex="-1"><a class="header-anchor" href="#撤销" aria-hidden="true">#</a> 撤销</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git checkout [file]</code></td><td>恢复暂存区的指定文件到工作区</td></tr><tr><td><code>git checkout [commit] [file]</code></td><td>恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td><code>git checkout .</code></td><td>恢复暂存区的所有文件到工作区</td></tr><tr><td><code>git reset [file]</code></td><td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td><code>git reset --hard</code></td><td>重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td><code>git reset [commit]</code></td><td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td><code>git reset --hard [commit] </code></td><td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td></tr><tr><td><code>git reset --keep [commit]</code></td><td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td><code>git revert [commit]</code></td><td>新建一个commit，用来撤销指定commit <br> 后者的所有变化都将被前者抵消，并且应用到当前分支</td></tr><tr><td><code>git stash</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr><tr><td><code>git stash pop</code></td><td>暂时将未提交的变化移除，稍后再移入</td></tr><tr><td>``</td><td>----</td></tr></tbody></table><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>git archive</code></td><td>生成一个可供发布的压缩包</td></tr><tr><td><code>git repack</code></td><td>打包未归档文件</td></tr><tr><td><code>git count-objects</code></td><td>计算解包的对象数量</td></tr><tr><td><code>git help</code> <br> 或 <br> <code>git --help</code></td><td>Git帮助，查看git相关命令，如果想看某个特定命令的具体细节，可使用<code>git [命令] --help</code> <br> 如 <code>git commit --help</code> 表示查看提交相关命令的帮助</td></tr><tr><td>``</td><td>----</td></tr></tbody></table>',20),h=[i,a];function g(m,l){return e(),r("div",null,h)}const s=d(c,[["render",g],["__file","all-commands.html.vue"]]);export{s as default};
