import{_ as e,o as a,c as n,a as d}from"./app-2be94d0d.js";const c={},s=d(`<h2 id="_1-docker架构" tabindex="-1"><a class="header-anchor" href="#_1-docker架构" aria-hidden="true">#</a> 1.docker架构</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/svg/28915315/1660548474734-dc17b48b-a862-48af-a8b2-41bbcc5ea96d.svg" alt="img"></p><h3 id="registry-镜像仓库" tabindex="-1"><a class="header-anchor" href="#registry-镜像仓库" aria-hidden="true">#</a> registry 镜像仓库</h3><p>registry可以理解为镜像仓库，用于保存docker image。</p><p>Docker Hub 是docker官方的镜像仓库，docker命令默认从docker hub中拉取镜像。我们也可以搭建自己的镜像仓库。</p><h3 id="image-镜像" tabindex="-1"><a class="header-anchor" href="#image-镜像" aria-hidden="true">#</a> image 镜像</h3><p>image可以理解为一个只读的应用模板。image包含了应用程序及其所需要的依赖环境，例如可执行文件、环境变量、初始化脚本、启动命令等。</p><h3 id="container-容器" tabindex="-1"><a class="header-anchor" href="#container-容器" aria-hidden="true">#</a> container 容器</h3><p>容器是image的一个运行实例。当我们运行一个image，就创建了一个容器。</p><h2 id="_2-docker-pull-拉取镜像" tabindex="-1"><a class="header-anchor" href="#_2-docker-pull-拉取镜像" aria-hidden="true">#</a> 2.docker pull 拉取镜像</h2><p>从镜像仓库拉取镜像到本地</p><p><code>docker pull nginx</code> 不写默认是latest</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull nginx:latest
docker pull nginx:1.22
docker pull nginx:1.22.0-alpine
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般不建议使用latest，因为最新的镜像是滚动更新的，过一段时间，可能跟你本地的不是同一个。</p><p>使用<code>docker images</code>命令查看本地镜像</p><h2 id="_3-docker-run-命令" tabindex="-1"><a class="header-anchor" href="#_3-docker-run-命令" aria-hidden="true">#</a> 3.docker run 命令</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run [可选参数] 镜像名:版本 []
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="公开端口-p" tabindex="-1"><a class="header-anchor" href="#公开端口-p" aria-hidden="true">#</a> 公开端口(-p)</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --name some-nginx -d -p 8080:80 nginx:1.22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，容器无法通过外部网络访问。</p><p>需要使用<code>-p</code>参数将容器的端口映射到宿主机端口，才可以通过宿主机IP进行访问。</p><p>浏览器打开 http://192.168.56.106:8080</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/28915315/1660634983461-c05bf2c7-10a4-4dfc-9c8c-c03d3aaf9c5e.png" alt="img"></p><p><code>-p 8080-8090:8080-8090</code>公开端口范围，前后必须对应</p><p><code>-p 192.168.56.106:8080:80</code>如果宿主机有多个ip，可以指定绑定到哪个ip</p><h3 id="后台运行" tabindex="-1"><a class="header-anchor" href="#后台运行" aria-hidden="true">#</a> 后台运行</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --name db-mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用run命令，部署mysql，docker先去本地查找镜像，如果找不到，就去docker hub中拉取镜像</p><ul><li><p><code>--name</code> 定义容器的名称</p></li><li><p><code>-e</code> 声明环境变量</p></li><li><p><code>-d</code>容器在后台运行</p></li><li><p>查看容器ip</p></li></ul><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>docker inspect \\
	--format=&#39;<span class="token punctuation">{</span><span class="token punctuation">{</span>range .NetworkSettings.Networks<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>.IPAddress<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span>end<span class="token punctuation">}</span><span class="token punctuation">}</span>&#39; db-mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用以下命令操作容器：</p><p><code>docker start db-mysql</code> 启动容器</p><p><code>docker stop</code> 关闭容器</p><p><code>docker restart</code> 重启容器</p><p><code>docker rm</code> 删除容器</p><h3 id="前台交互运行" tabindex="-1"><a class="header-anchor" href="#前台交互运行" aria-hidden="true">#</a> 前台交互运行</h3><p>创建一个新的容器，使用mysql客户端</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it --rm mysql:5.7 mysql -h172.17.0.2 -uroot -p
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-it</code> 使用交互模式，可以在控制台里输入、输出</p><p><code>--rm</code>**在容器退出时自动删除容器。**一般在使用客户端程序时使用此参数。</p><p>如果每次使用客户端都创建一个新的容器，这样将占用大量的系统空间。</p><p><code>mysql -h172.17.0.2 -uroot -p</code>表示启动容器时执行的命令。</p><ul><li><code>docker exec</code>在运行的容器中执行命令，一般配合<code>-it</code>参数使用交互模式</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -it db-mysql /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-常用命令" tabindex="-1"><a class="header-anchor" href="#_3-常用命令" aria-hidden="true">#</a> 3.常用命令</h2><ul><li><code>docker ps</code> 查看正在运行的容器</li><li><code>docker ps -a</code> 查看所有容器，包括正在运行和停止的</li><li><code>docker inspect</code> 查看容器的信息</li><li><code>docker logs</code>查看日志</li><li><code>docker cp</code> 在容器和宿主机间复制文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">cp</span> ./some_file 容器名:/work
<span class="token function">docker</span> <span class="token function">cp</span> 容器名:/var/logs/ /tmp/app_logs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,47),i=[s];function r(t,o){return a(),n("div",null,i)}const p=e(c,[["render",r],["__file","03.html.vue"]]);export{p as default};
