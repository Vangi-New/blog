import{_ as e,r as p,o,c,b as n,e as s,d as t,a as i}from"./app-73d38b75.js";const l="/assets/20240315163934-6e158450.png",u={},r=n("h2",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),k={href:"https://so.csdn.net/so/search?q=%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},d=i(`<h2 id="events-模块" tabindex="-1"><a class="header-anchor" href="#events-模块" aria-hidden="true">#</a> events 模块</h2><p><code>Node.js</code> 是基于事件驱动实现的异步操作。 事件驱动依赖就是的 events 模块。</p><p><code>events</code> 模块导出一个 <code>EventEmitter</code> 类，它是发布订阅模式的一种实现。</p><p>无论你是了解发布订阅模式，只要你有过前端开发的经验，那么对于 DOM事件监听，事件解绑等操作一定不陌生。其实这就是一种发布订阅。</p><p>平时开发中我们很少会直接使用这个模块。这是因为 <code>Node.js</code> 的很多内置模块，比如 <code>fs</code> ， <code>http</code> 等模块，都是继承自 <code>EventEmitter</code> 类而实现的。</p><p>也就是说，我们平时经常用到的模块，就已经具备了发布订阅（事件监听、事件触发）的能力。后面会介绍到 <code>Stream</code> 和 <code>http</code> 模块的使用，到时候就会发现，到处都有发布订阅的影子。</p><h2 id="eventemitter-类" tabindex="-1"><a class="header-anchor" href="#eventemitter-类" aria-hidden="true">#</a> EventEmitter 类</h2><p><code>events</code> 模块对外暴露 <strong><code>EventEmitter</code></strong> 类。</p><h3 id="原型" tabindex="-1"><a class="header-anchor" href="#原型" aria-hidden="true">#</a> 原型</h3><p>打印一下它的原型对象：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><p>有很多方法，光看名字我们就能知道每个方法的作用是什么：</p><ul><li>on：订阅事件</li><li>emit：发布事件</li><li>once：只订阅一次，也就是只能触发一次</li><li><code>removeListener</code>：移除订阅者</li><li><code>removerAllListeners</code>：移除所有的订阅者</li><li>off：<code>removeLister</code> 方法的别名</li></ul><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h3><p><code>EventEmitter</code> 类的使用方式有两种。</p><p>首先它是一个构造函数（源码中以构造函数实现），所以可以通过实例化的方法来使用。</p><p>其次，node 的很多模块都是继承自它，所以子类除了自身的能力之外，也具备了发布订阅的能力。</p><p>这里演示下第二种。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> EventEmitter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;events&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">Reader</span> <span class="token keyword">extends</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... </span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">buy</span> <span class="token operator">=</span> <span class="token parameter">bookName</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;买新书：&#39;</span><span class="token punctuation">,</span> bookName<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 订阅小册上新的事件；当有上新后，就买买买</span>
reader<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> buy<span class="token punctuation">)</span>

<span class="token comment">// 小册上新了</span>
reader<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;《TypeScript 全面进阶指南》&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 买新书： 《TypeScript 全面进阶指南》</span>
<span class="token comment">// 小册又上新了</span>
reader<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;《NestJS 项目实战》&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 买新书： 《《NestJS 项目实战》》</span>

<span class="token comment">// 最近不打算买书了: 取消订阅</span>
reader<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> buy<span class="token punctuation">)</span>

<span class="token comment">// 小册上新了。但是取消了订阅，所以消息不会发给你了</span>
reader<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;new&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;React 上天入地》&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 没有效果</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自己实现发布订阅" tabindex="-1"><a class="header-anchor" href="#自己实现发布订阅" aria-hidden="true">#</a> 自己实现发布订阅</h3><p>实现发布订阅，也是常考的一道面试题。</p><p>实现起来也并不复杂，结合注释很方便理解。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义一个构造函数</span>
<span class="token keyword">function</span> <span class="token function">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//  存储订阅者，也就是事件处理函数的容器。</span>
  <span class="token comment">// 数据结构为：{ event_type1: [handler1, ...], ... }</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_events <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// </span>
<span class="token punctuation">}</span>

<span class="token comment">// 订阅事件的方法</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 首先判断要注册的事件对应的容器是否存在，若存在则将新的 handler 存入，否则先创建一个对应的容器</span>
  <span class="token keyword">let</span> events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>events<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 只订阅一次事件的方法</span>
<span class="token comment">// 思路：利用切片编程的思想，给原始 handler 包装一层。</span>
<span class="token comment">// 正常的执行逻辑：handler 执行</span>
<span class="token comment">// 切片编程的逻辑：handler 执行，执行完再调用一次 off 。相当于扩展了 handler 方法</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">once</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 发布事件的方法</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">emit</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 从事件容器中取出对应的 handler 依次去执行</span>
  <span class="token comment">// 若发布的事件不存在，则不进行处理</span>
  <span class="token keyword">let</span> events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
  <span class="token comment">// events可能存在空数组的情况，需要处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>events <span class="token operator">||</span> events<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  events<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">handler</span> <span class="token operator">=&gt;</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token comment">// 移除事件监听</span>
<span class="token class-name">EventEmitter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">off</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> handler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> events <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">[</span>type<span class="token punctuation">]</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>events <span class="token operator">||</span> events<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 过滤掉容器中需要解除监听的方法</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> handler <span class="token operator">!==</span> item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 测试</span>
<span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventEmitter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token function-variable function">play</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;play&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">sing</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;sing&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;play&#39;</span><span class="token punctuation">,</span> play<span class="token punctuation">)</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;sing&#39;</span><span class="token punctuation">,</span> sing<span class="token punctuation">)</span>


emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;sing&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rap&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// sing rap</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;play&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;篮球&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// play 篮球</span>

emitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;play&#39;</span><span class="token punctuation">,</span> play<span class="token punctuation">)</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;play&#39;</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> <span class="token function-variable function">dance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;dance&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

emitter<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">&#39;dance&#39;</span><span class="token punctuation">,</span> dance<span class="token punctuation">)</span>

emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;dance&#39;</span><span class="token punctuation">)</span> <span class="token comment">// dance</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;dance&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 已移除订阅，不执行</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="延申阅读-eventbus-和-mitt" tabindex="-1"><a class="header-anchor" href="#延申阅读-eventbus-和-mitt" aria-hidden="true">#</a> 延申阅读：eventbus 和 mitt</h2><p>有一道经典的面试题：Vue 组件通信的方式有哪些？</p><p>除了常见的通过属性，自定义事件，借助状态库，在 Vue2 中还有一种方式，叫作 eventBus 事件总线。</p><p>EventBus 本质上就是一个发布订阅模式。但是在 Vue3 中被移除了，官方推荐使用一个第三方库 mitt 来做发布订阅。</p><p>Mitt是一个十分小巧的发布订阅库，大约只有200字节左右。而且用法上也没有什么太大的差异，稍微看一下文档就会用了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> mitt <span class="token keyword">from</span> <span class="token string">&#39;mitt&#39;</span>

<span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token function">mitt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 订阅事件</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token punctuation">)</span>

<span class="token comment">// 订阅所有的事件</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token punctuation">)</span>

<span class="token comment">// 触发事件</span>
emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;b&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 清除所有的订阅者</span>
emitter<span class="token punctuation">.</span>all<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 使用事件处理函数的引用，方便移除监听 </span>
<span class="token keyword">function</span> <span class="token function">onFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> onFoo<span class="token punctuation">)</span>   <span class="token comment">// listen</span>
emitter<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> onFoo<span class="token punctuation">)</span>  <span class="token comment">// unlisten</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文介绍了 <code>Node.js</code> 中 <code>events</code> 模块的使用，它主要导出一个 <code>EventEmitter</code> 类来做发布订阅。<code>Node.js</code> 的很多核心模块都继承自 <code>EventEmitter</code> 类。</p><p>它是一个底层的模块，但通常很少直接使用它。等后面讲到 <code>Stream</code>，再后面讲到 <code>http</code> 模块的时候，就能体会到它的存在了。</p><p>额外提一嘴，手写实现，并不是要重复造轮子，主要是为了加深对原生方法的理解。</p><p>当然，如果有一个非常巧妙的设计和实现，那早晚也会大火的。</p>`,35),v={href:"https://www.qycn.com/xzx/article/14049.html",target:"_blank",rel:"noopener noreferrer"};function m(b,f){const a=p("ExternalLinkIcon");return o(),c("div",null,[r,n("p",null,[s("本文会介绍 events 模块的主要作用和使用方式，以及自己实现一个简单的"),n("a",k,[s("发布订阅模式"),t(a)]),s("，帮助加深理解。")]),d,n("p",null,[n("a",v,[s("详解node.js中的EventEmitter相关知识有哪些-群英 (qycn.com)"),t(a)])])])}const g=e(u,[["render",m],["__file","eventsmokuaihefabudingyuemoshi.html.vue"]]);export{g as default};
