import{_ as e,o as r,c as o,a as s}from"./app-4724add5.js";const t="/assets/20231215152340-0635d7be.png",n="/assets/20231215152456-fb81297a.png",a="/assets/20231215153021-49748abe.png",p="/assets/20231215153150-3add2afc.png",i="/assets/20231215153226-118aa359.png",d="/assets/20231215154114-25c7c9d5.png",c={},l=s('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>TypeScript 是 JS 的超集，TS 提供了 JS 的所有功能，并且额外的增加了：<strong>类型系统</strong>。</p><ul><li><p>所有的 JS 代码都是 TS 代码。</p></li><li><p>JS 有类型（比如，number/string 等），但是 <strong>JS 不会检查变量的类型是否发生变化</strong>。而 <strong>TS 会检查</strong>。</p></li></ul><p>TypeScript 类型系统的主要优势：可以<strong>显示标记出代码中的意外行为</strong>，从而降低了发生错误的可能性。</p><ol><li><p>类型注解</p></li><li><p>常用基础类型</p></li></ol><h2 id="_3-1-类型注解" tabindex="-1"><a class="header-anchor" href="#_3-1-类型注解" aria-hidden="true">#</a> 3.1 类型注解</h2><p>示例代码：</p><p><img src="'+t+'" alt=""></p><p>说明：代码中的 : <strong>number</strong> 就是类型注解。</p><p>作用：为变量<strong>添加类型约束</strong>。比如，上述代码中，约定变量 age 的类型为 number（数值类型）。</p><p>解释：<strong>约定了什么类型，就只能给变量赋值该类型的值</strong>，否则，就会报错。</p><p><img src="'+n+'" alt=""></p><h2 id="_3-2-常用基础类型概述" tabindex="-1"><a class="header-anchor" href="#_3-2-常用基础类型概述" aria-hidden="true">#</a> 3.2 常用基础类型概述</h2><p>可以将 TS 中的常用基础类型细分为两类：1 JS 已有类型 2 TS 新增类型。</p><ol><li><p>JS 已有类型</p><ul><li>原始类型：<code>number/string/boolean/null/undefined/symbol</code>。</li><li>对象类型：<code>object</code>（包括，数组、对象、函数等对象）。</li></ul></li><li><p>TS 新增类型</p><ul><li>联合类型、自定义类型（类型别名）、接口、元组、字面量类型、枚举、<code>void</code>、<code>any</code> 等。</li></ul></li></ol><h2 id="_3-3-原始类型" tabindex="-1"><a class="header-anchor" href="#_3-3-原始类型" aria-hidden="true">#</a> 3.3 原始类型</h2><p>原始类型：<code>number/string/boolean/null/undefined/symbol</code>。</p><p>特点：<strong>简单</strong>。这些类型，完全按照 JS 中类型的名称来书写。</p><p><img src="'+a+'" alt=""></p><h2 id="_3-4-数组类型" tabindex="-1"><a class="header-anchor" href="#_3-4-数组类型" aria-hidden="true">#</a> 3.4 数组类型</h2><p>对象类型：object（包括，数组、对象、函数等对象）。</p><p>特点：对象类型，在 TS 中更加细化，<strong>每个具体的对象都有自己的类型语法</strong>。</p><p><strong>数组类型</strong>的两种写法：（推荐使用 <code>number[]</code> 写法）</p><p><img src="'+p+'" alt=""></p><p>需求：数组中既有 <code>number</code> 类型，又有 <code>string</code> 类型，这个数组的类型应该如何写？</p><p><img src="'+i+'" alt=""></p><p>解释：<code>|</code> （竖线）在 TS 中叫做联合类型（由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种）。</p><p>注意：这是 TS 中联合类型的语法，只有一根竖线，不要与 JS 中的或（<code>||</code>）混淆了。</p><h2 id="_3-5-类型别名" tabindex="-1"><a class="header-anchor" href="#_3-5-类型别名" aria-hidden="true">#</a> 3.5 类型别名</h2><p><strong>类型别名</strong>（自定义类型）：为任意类型起别名。</p><p>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，<strong>简化该类型的使用</strong>。</p><p><img src="'+d+'" alt=""></p><p>解释：</p><ol><li><p>使用 <strong>type</strong> 关键字来创建类型别名。</p></li><li><p>类型别名（比如，此处的 CustomArray），可以是任意合法的变量名称。</p></li><li><p>创建类型别名后，直接<strong>使用该类型别名作为变量的类型注解</strong>即可。</p></li></ol><h2 id="_3-6-函数类型" tabindex="-1"><a class="header-anchor" href="#_3-6-函数类型" aria-hidden="true">#</a> 3.6 函数类型</h2>',35),h=[l];function g(_,u){return r(),o("div",null,h)}const b=e(c,[["render",g],["__file","03.html.vue"]]);export{b as default};
