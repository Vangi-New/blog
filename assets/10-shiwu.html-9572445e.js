import{_ as e,o as i,c as d,a as n}from"./app-6c7fecab.js";const a={},s=n('<p>事务 (<code>Transaction</code>) 是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行</p><p>事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源</p><p>举个例子，A 向 B 转账 100 元，其实整个转账过程就是一个事务，要么转账成功了，A 的账户扣了 100 元，B 的账户增加了 100 元，要么转账失败，A 还是那么多钱，B 还是没钱，如果出现 A 扣了 100 元，B 的账户却没增加 100 元，那是要出问题的，是不？</p><p>事务，就是用来做这件事的，用来保证要么转账成功，要么转账失败</p><h2 id="事务属性" tabindex="-1"><a class="header-anchor" href="#事务属性" aria-hidden="true">#</a> 事务属性</h2><p>事务可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行</p><p>一般来说，事务是必须满足4个条件 ( ACID )</p><p>Atomicity(原子性)、Consistency(稳定性)、Isolation(隔离性)、Durability(可靠性)</p><ol><li><p><strong>原子性</strong></p><p>一组事务，要么成功；要么失败回滚当作什么事都没发生</p></li><li><p><strong>稳定性</strong></p><p>有非法数据 (外键约束之类)，事务撤回</p></li><li><p><strong>隔离性</strong></p><p>事务独立运行。一个事务处理后的结果，影响了其它事务，那么其它事务会撤回</p><p>事务的100%隔离，需要牺牲速度</p></li><li><p><strong>可靠性</strong></p><p>软、硬件崩溃后，SQLite 数据表驱动会利用日志文件重构修改</p></li></ol><h2 id="sqlite-事务" tabindex="-1"><a class="header-anchor" href="#sqlite-事务" aria-hidden="true">#</a> SQLite 事务</h2><p>SQLite 默认设置下，事务都是自动提交的，即执行 SQL 语句后就会马上执行 COMMIT 操作</p><p>因此要显式地开启一个事务务须使用命令 <code>BEGIN TRANSACTION</code></p><p>SQLite 中可以使用下面的命令来控制事务</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>BEGIN TRANSACTION</td><td>开始事务处理。</td></tr><tr><td>COMMIT END TRANSACTION</td><td>保存更改</td></tr><tr><td>ROLLBACK</td><td>回滚所做的更改</td></tr></tbody></table><p>事务控制命令只与 DML 命令 INSERT、UPDATE 和 DELETE 一起使用</p><p>他们不能在创建表或删除表时使用，因为这些操作在数据库中是自动提交的</p><h3 id="begin-transaction-命令" tabindex="-1"><a class="header-anchor" href="#begin-transaction-命令" aria-hidden="true">#</a> BEGIN TRANSACTION 命令</h3><p>事务 ( Transaction ) 可以使用 <code>BEGIN TRANSACTION</code> 命令或 <code>BEGIN</code> 命令来启动</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>BEGIN;\nBEGIN TRANSACTION;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>事务通常会持续执行下去，直到遇到下一个 <code>COMMIT</code> 或 <code>ROLLBACK</code> 命令</p><p>有个特殊情况是：在数据库关闭或发生错误时，事务处理会回滚</p><h2 id="commit-命令" tabindex="-1"><a class="header-anchor" href="#commit-命令" aria-hidden="true">#</a> COMMIT 命令</h2><p><code>COMMIT</code> 命令用于把事务调用的更改保存到数据库中</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>COMMIT;\nEND TRANSACTION;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rollback-命令" tabindex="-1"><a class="header-anchor" href="#rollback-命令" aria-hidden="true">#</a> ROLLBACK 命令</h2><p><code>ROLLBACK</code> 命令是用于撤消尚未保存到数据库的事务</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>ROLLBACK;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例子：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>--开启事务\nBEGIN;\n\nINSERT INTO `user` (`id`,`name`,`account`,`password`,`create_time`,`balance`)\nVALUES (6, &#39;peter&#39;, &#39;testaccount01&#39;, &#39;123456&#39;, 123456,100 );\n\n--回滚事务\nROLLBACK;\n\n--开启事务\nBEGIN;\n\nINSERT INTO `user` (`id`,`name`,`account`,`password`,`create_time`,`balance`)\nVALUES (7, &#39;hello&#39;, &#39;testaccount01&#39;, &#39;123456&#39;, 123456,100 );\n\n--提交事务\nCOMMIT;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',29),l=[s];function r(t,c){return i(),d("div",null,l)}const p=e(a,[["render",r],["__file","10-shiwu.html.vue"]]);export{p as default};
